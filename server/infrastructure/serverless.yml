service: configurator-server-infrastructure
frameworkVersion: '2'
useDotenv: true

custom:
  appName: woolman-configurator-app
  serverless-offline:
    httpPort: 6000
    websocketPort: 6001
    lambdaPort: 6002
  imagesBucket: ${self:custom.appName}-images-${self:provider.stage}
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8001
      migrate: true
      convertEmptyValues: true
  databaseTable: ${self:custom.appName}-${self:provider.stage}

plugins:
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}
  region: eu-central-1
  profile: configurator
  stackPolicy:
    - Effect: Allow
      Principal: '*'
      Action: 'Update:*'
      Resource: '*'
  # Prevent CloudFormation from replacing or deleting DynamoDB tables
    - Effect: Deny
      Principal: '*'
      Resource: '*'
      Condition:
        StringEquals:
          ResourceType:
            - AWS::DynamoDB::Table
      Action:
        - Update:Replace
        - Update:Delete
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - { "Fn::GetAtt": ["AppDynamoDBTable", "Arn" ] }
resources:
  - ${file(./dynamodb.yml)}
  - ${file(./s3.yml)}